import xmltodict

timetrigger = """<math xmlns="http://www.w3.org/1998/Math/MathML">
            <apply>
              <gt/>
              <csymbol encoding="text" definitionURL="http://www.sbml.org/sbml/symbols/time"> time</csymbol>
            </apply>
          </math>"""

kineticlaw = """<math xmlns="http://www.w3.org/1998/Math/MathML">
            <apply>
              <times/>
              <ci> comp1 </ci>
              <apply>
                <minus/>
                <apply>
                  <times/>
                  <ci> kf_0 </ci>
                  <ci> B </ci>
                </apply>
                <apply>
                  <times/>
                  <ci> kr_0 </ci>
                  <ci> BL </ci>
                </apply>
              </apply>
            </apply>
          </math>"""

foil = """<math xmlns="http://www.w3.org/1998/Math/MathML">
    <mrow>
       <msup>
         <mfenced>
           <mrow>
             <mi>a</mi>
             <mo>+</mo>
             <mi>b</mi>
           </mrow>
         </mfenced>
         <mn>2</mn>
       </msup>
     </mrow>
    </math>"""

quadratic = """
<math xmlns="http://www.w3.org/1998/Math/MathML">
    <apply>
      <eq/>
      <ci>x</ci>
      <apply>
        <divide/>
        <apply>
          <csymbol>PlusMinus;</csymbol>
          <apply>
            <minus/>
            <ci>b</ci>
          </apply>
          <apply>
            <root/>
            <degree><cn>2</cn></degree>
            <apply>
              <minus/>
              <apply>
                <power/>
                <ci>b</ci>
                <cn>2</cn>
              </apply>
              <apply>
                <times/>
                <cn>4</cn>
                <ci>a</ci>
                <ci>c</ci>
              </apply>
            </apply>
          </apply>
        </apply>
        <apply>
          <times/>
          <cn>2</cn>
          <ci>a</ci>
        </apply>
      </apply>
    </apply>
</math>"""


def mathmltostr(mathml):
    mathmldict = xmltodict.parse(mathml)['math']
    mathmldict
    print(mathmldict)

import xml.etree.ElementTree as ET

tree = ET.ElementTree(ET.fromstring(quadratic))

treelist = list(tree.iter())

# A function to do postorder tree traversal
def printPostorder(root = None,x = 0,outputstr = ""):

    if root:
        for i,item in enumerate(list(root)):
            outputstr += printPostorder(item,x+1)

        for i,item in enumerate(list(root)):
            # print(" level: ", x ,"index: ",i,item)
            node = parseNode(item)
            outputstr += node

    return outputstr

def parseNode(node):

    import re

    nodestr = str(node)
    nodestr = re.sub('{(.*)}','', nodestr)
    nodestr = re.search('\'(.*)\'', nodestr).group(1) #remove mathml url

    nodestr = nodestr.strip()

    if nodestr == "ci" or nodestr == "cn" or nodestr == "csymbol" or nodestr == "mo":
        nodestr = str(node.text).strip()

    nodestr += ' '

    return nodestr


print(printPostorder(root = tree.getroot(),x = 0))

#print(list(tree.getroot()))

# for item in treelist:
#     print(item)
